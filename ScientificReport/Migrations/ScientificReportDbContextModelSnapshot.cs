// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScientificReport.DAL.DbContext;

namespace ScientificReport.Migrations
{
    [DbContext(typeof(ScientificReportDbContext))]
    partial class ScientificReportDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ApplicantsPatentLicenseActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicantId");

                    b.Property<Guid?>("ApplicantId1");

                    b.Property<int>("PatentLicenseActivityId");

                    b.Property<Guid?>("PatentLicenseActivityId1");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId1");

                    b.HasIndex("PatentLicenseActivityId1");

                    b.ToTable("ApplicantsPatentLicenseActivities");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocumentInfo");

                    b.Property<bool>("IsPeriodical");

                    b.Property<bool>("IsPrintCanceled");

                    b.Property<bool>("IsRecommendedToPrint");

                    b.Property<string>("LiabilityInfo");

                    b.Property<int>("Number");

                    b.Property<int>("PagesAmount");

                    b.Property<string>("PublishingHouseName");

                    b.Property<string>("PublishingPlace");

                    b.Property<int>("PublishingYear");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.AuthorsPatentLicenseActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<Guid?>("AuthorId1");

                    b.Property<int>("PatentLicenseActivityId");

                    b.Property<Guid?>("PatentLicenseActivityId1");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId1");

                    b.HasIndex("PatentLicenseActivityId1");

                    b.ToTable("AuthorsPatentLicenseActivities");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.CoApplicantsPatentLicenseActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoApplicant");

                    b.Property<int>("PatentLicenseActivityId");

                    b.Property<Guid?>("PatentLicenseActivityId1");

                    b.HasKey("Id");

                    b.HasIndex("PatentLicenseActivityId1");

                    b.ToTable("CoApplicantsPatentLicenseActivities");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.CoauthorsPatentLicenseActivities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Coauthor");

                    b.Property<int>("PatentLicenseActivityId");

                    b.Property<Guid?>("PatentLicenseActivityId1");

                    b.HasKey("Id");

                    b.HasIndex("PatentLicenseActivityId1");

                    b.ToTable("CoauthorsPatentLicenseActivities");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("DepartmentReportId");

                    b.Property<string>("Topic");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentReportId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("HeadId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("HeadId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Grant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("TeacherReportId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("Grants");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MemberOf");

                    b.Property<string>("MembershipInfo");

                    b.Property<Guid?>("TeacherReportId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Opposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<DateTime>("DateOfOpposition");

                    b.Property<Guid?>("OpponentId");

                    b.Property<Guid?>("TeacherReportId");

                    b.HasKey("Id");

                    b.HasIndex("OpponentId");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("Oppositions");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.PatentLicenseActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<Guid?>("TeacherReportId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("PatentLicenseActivities");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.PostgraduateDissertationGuidance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateDegreeGained");

                    b.Property<string>("Dissertation");

                    b.Property<int>("GraduationYear");

                    b.Property<Guid?>("GuideId");

                    b.Property<string>("PostgraduateName");

                    b.Property<string>("Speciality");

                    b.Property<Guid?>("TeacherReportId");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("PostgraduateDissertationGuidances");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.PostgraduateGuidance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("GuideId");

                    b.Property<string>("PostgraduateInfo");

                    b.Property<string>("PostgraduateName");

                    b.Property<Guid?>("TeacherReportId");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("PostgraduateGuidances");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PagesAmount");

                    b.Property<int>("PrintStatus");

                    b.Property<string>("PublishingHouseName");

                    b.Property<string>("PublishingPlace");

                    b.Property<int>("PublishingYear");

                    b.Property<string>("Specification");

                    b.Property<Guid?>("TeacherReportId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ReportThesis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConferenceId");

                    b.Property<Guid?>("TeacherReportId");

                    b.Property<string>("Thesis");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("ReportTheses");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Reports.DepartmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Edited");

                    b.Property<Guid?>("FacultyReportId");

                    b.Property<Guid?>("HeadOfDepartmentId");

                    b.HasKey("Id");

                    b.HasIndex("FacultyReportId");

                    b.HasIndex("HeadOfDepartmentId");

                    b.ToTable("DepartmentReports");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Reports.FacultyReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdministratorId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Edited");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("FacultyReports");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Reports.TeacherReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("DepartmentReportId");

                    b.Property<DateTime>("Edited");

                    b.Property<Guid?>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentReportId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherReports");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Reports.TeacherReportsScientificWorks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ScientificWorkId");

                    b.Property<Guid?>("TeacherReportId");

                    b.HasKey("Id");

                    b.HasIndex("ScientificWorkId");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("TeacherReportsScientificWorks");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfReview");

                    b.Property<Guid?>("ReviewerId");

                    b.Property<Guid?>("TeacherReportId");

                    b.Property<Guid?>("WorkId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TeacherReportId");

                    b.HasIndex("WorkId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ScientificConsultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CandidateName");

                    b.Property<string>("DissertationTitle");

                    b.Property<Guid?>("GuideId");

                    b.Property<Guid?>("TeacherReportId");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("ScientificConsultations");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ScientificInternship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents");

                    b.Property<DateTime>("Ended");

                    b.Property<string>("PlaceOfInternship");

                    b.Property<DateTime>("Started");

                    b.Property<Guid?>("TeacherReportId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("ScientificInternships");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ScientificWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Contents");

                    b.Property<string>("Cypher");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<Guid?>("TeacherReportId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TeacherReportId");

                    b.ToTable("ScientificWorks");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcademicStatus");

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("BirthYear");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<Guid?>("DepartmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int>("GraduationYear");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApproved");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Position");

                    b.Property<string>("ScientificDegree");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("YearDegreeAssigned");

                    b.Property<int>("YearDegreeGained");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesArticles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ArticleId");

                    b.Property<Guid>("AuthorId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("UserProfilesArticles");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesGrants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GrantId");

                    b.Property<Guid?>("GrantId1");

                    b.Property<int>("UserProfileId");

                    b.Property<Guid?>("UserProfileId1");

                    b.HasKey("Id");

                    b.HasIndex("GrantId1");

                    b.HasIndex("UserProfileId1");

                    b.ToTable("UserProfilesGrants");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesPublications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PublicationId");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfilesPublications");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesReportThesis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ReportThesisId");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ReportThesisId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfilesReportTheses");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesScientificInternships", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ScientificInternshipId");

                    b.Property<Guid?>("ScientificInternshipId1");

                    b.Property<int>("UserProfileId");

                    b.Property<Guid?>("UserProfileId1");

                    b.HasKey("Id");

                    b.HasIndex("ScientificInternshipId1");

                    b.HasIndex("UserProfileId1");

                    b.ToTable("UserProfilesScientificInternships");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesScientificWorks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ScientificWorkId");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ScientificWorkId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfilesScientificWorks");
                });

            modelBuilder.Entity("ScientificReport.DAL.Roles.UserProfileRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificReport.DAL.Roles.UserProfileRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ScientificReport.DAL.Roles.UserProfileRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ApplicantsPatentLicenseActivities", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Applicant")
                        .WithMany("ApplicantsPatentLicenseActivities")
                        .HasForeignKey("ApplicantId1");

                    b.HasOne("ScientificReport.DAL.Entities.PatentLicenseActivity", "PatentLicenseActivity")
                        .WithMany("ApplicantsPatentLicenseActivities")
                        .HasForeignKey("PatentLicenseActivityId1");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.AuthorsPatentLicenseActivities", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Author")
                        .WithMany("AuthorsPatentLicenseActivities")
                        .HasForeignKey("AuthorId1");

                    b.HasOne("ScientificReport.DAL.Entities.PatentLicenseActivity", "PatentLicenseActivity")
                        .WithMany("AuthorsPatentLicenseActivities")
                        .HasForeignKey("PatentLicenseActivityId1");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.CoApplicantsPatentLicenseActivities", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.PatentLicenseActivity", "PatentLicenseActivity")
                        .WithMany("CoApplicantsPatentLicenseActivities")
                        .HasForeignKey("PatentLicenseActivityId1");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.CoauthorsPatentLicenseActivities", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.PatentLicenseActivity", "PatentLicenseActivity")
                        .WithMany("CoauthorsPatentLicenseActivities")
                        .HasForeignKey("PatentLicenseActivityId1");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Conference", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Reports.DepartmentReport")
                        .WithMany("Conferences")
                        .HasForeignKey("DepartmentReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Department", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Head")
                        .WithMany()
                        .HasForeignKey("HeadId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Grant", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("Grants")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Membership", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("Memberships")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Opposition", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId");

                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("Oppositions")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.PatentLicenseActivity", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("Patents")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.PostgraduateDissertationGuidance", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId");

                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("PostgraduateDissertationGuidances")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.PostgraduateGuidance", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId");

                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("PostgraduateGuidances")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Publication", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("Publications")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ReportThesis", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");

                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("ReportTheses")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Reports.DepartmentReport", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Reports.FacultyReport")
                        .WithMany("DepartmentReports")
                        .HasForeignKey("FacultyReportId");

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Reports.FacultyReport", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Reports.TeacherReport", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Reports.DepartmentReport")
                        .WithMany("TeacherReports")
                        .HasForeignKey("DepartmentReportId");

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Reports.TeacherReportsScientificWorks", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId");

                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport", "TeacherReport")
                        .WithMany()
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.Review", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("Reviews")
                        .HasForeignKey("TeacherReportId");

                    b.HasOne("ScientificReport.DAL.Entities.Publication", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ScientificConsultation", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId");

                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("ScientificConsultations")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ScientificInternship", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("ScientificInternships")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.ScientificWork", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Department")
                        .WithMany("ScientificWorks")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ScientificReport.DAL.Entities.Reports.TeacherReport")
                        .WithMany("ScientificWorks")
                        .HasForeignKey("TeacherReportId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfile", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Department")
                        .WithMany("Staff")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesArticles", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Article", "Article")
                        .WithMany("UserProfilesArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "Author")
                        .WithMany("UserProfilesArticles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesGrants", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Grant", "Grant")
                        .WithMany("UserProfilesGrants")
                        .HasForeignKey("GrantId1");

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "UserProfile")
                        .WithMany("UserProfilesGrants")
                        .HasForeignKey("UserProfileId1");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesPublications", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.Publication", "Publication")
                        .WithMany("UserProfilesPublications")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "UserProfile")
                        .WithMany("UserProfilesPublications")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesReportThesis", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.ReportThesis", "ReportThesis")
                        .WithMany("UserProfilesReportTheses")
                        .HasForeignKey("ReportThesisId");

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "UserProfile")
                        .WithMany("UserProfilesReportTheses")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesScientificInternships", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.ScientificInternship", "ScientificInternship")
                        .WithMany("UserProfilesScientificInternships")
                        .HasForeignKey("ScientificInternshipId1");

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "UserProfile")
                        .WithMany("UserProfilesScientificInternships")
                        .HasForeignKey("UserProfileId1");
                });

            modelBuilder.Entity("ScientificReport.DAL.Entities.UserProfile.UserProfilesScientificWorks", b =>
                {
                    b.HasOne("ScientificReport.DAL.Entities.ScientificWork", "ScientificWork")
                        .WithMany("UserProfilesScientificWorks")
                        .HasForeignKey("ScientificWorkId");

                    b.HasOne("ScientificReport.DAL.Entities.UserProfile.UserProfile", "UserProfile")
                        .WithMany("UserProfilesScientificWorks")
                        .HasForeignKey("UserProfileId");
                });
#pragma warning restore 612, 618
        }
    }
}
