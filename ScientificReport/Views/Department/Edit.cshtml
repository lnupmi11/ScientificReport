@using Microsoft.AspNetCore.Mvc.Localization
@using ScientificReport.DTO.Models.Department
@model ScientificReport.DTO.Models.Department.DepartmentEditModel
@inject IViewLocalizer Localizer

@{
	ViewData["Title"] = Localizer["Edit department"];
	Layout = "_Layout";
}

<style type="text/css">
	.myLabel {
		/* margin-bottom: 10px; */
		position: relative !important;
		left: 0 !important;
		font-size: 12.5px !important;
	}
	.span-label {
    	color: black;
    }
</style>

<h4>@ViewData["Title"]</h4>
<div class="row">
	<div class="col s12">
		<div asp-validation-summary="All" class="validate"></div>
		<form asp-action="Edit" method="post">
			<div class="row">
				<div class="input-field col s6">
					<input asp-for="Title" type="text" class="validate">
					<label asp-for="Title">@Localizer["Title"]</label>
					<span class="helper-text" asp-validation-for="Title" data-error="some data is in bad format" data-success=""></span>
				</div>
			</div>
			<div class="row">
				<div class="input-field col s4">
					<label asp-for="SelectedHeadId" class="myLabel">@Localizer["Head"]</label>
					@{
						var userSelection = Model.UserSelection.Select(user => new SelectItem(user.FullName, user.Id.ToString(), user.Id.Equals(Model.Department.Head.Id)));
					}
					@Html.DropDownListFor(x => Model.SelectedHeadId, new SelectList(userSelection, "Value", "Text"), new {@class = "col s12"})
					@Html.ValidationMessageFor(x => x.SelectedHeadId, "", new {@class = "validate", @required = "required"})
					<br/>
				</div>
			</div>
			<div class="row">
				<div class="col s6">
					<label class="myLabel">@Localizer["Staff"]:</label>
					<div class="authors-list">
						@if (Model.UserSelection != null && Model.Staff != null)
						{
							var selection = Model.UserSelection.Select(user => new SelectItem(user.FullName, user.Id.ToString(), user.Id.Equals(Model.Department.Head.Id)));
							foreach (var user in selection)
							{
								var contains = Model.Staff.Any(s => s.Id.ToString().Equals(user.Value));
								<p>
									@if (!Model.Head.Id.ToString().Equals(user.Value))
									{
										<label>
											<input class="filled-in" type="checkbox" onclick="clickStaff(this, '@Model.DepartmentId', '@user.Value')" @(contains ? "checked=\"checked\"" : "")/>
											<span class="span-label">@user.Text</span>
										</label>
									}
									else
									{
										<label>
											<input class="filled-in" type="checkbox" title="Can not remove head of department" @(contains ? "checked=\"checked\"" : "") disabled="disabled"/>
											<span class="span-label">@user.Text</span>
										</label>
									}
								</p>
							}
						}
					</div>
				</div>
			</div>
			<div class="row myButtons">
				<button type="submit" class="waves-effect btn-small accent-2">@Localizer["Save"]</button>
				<a asp-action="Index" class="waves-effect btn-small blue darken-3">@Localizer["Cancel"]</a>
			</div>
		</form>
	</div>
</div>

@section Scripts {
	<script type="text/javascript">
		$(document).ready(function() {
			$('select').formSelect();
		});
		let staffBody = (userId) => {
			return { UserId: userId };
		};
		const clickStaff = toggleCheckboxEntity('Department', 'AddUserToStaff', 'RemoveUserFromStaff', staffBody);
	</script>
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
