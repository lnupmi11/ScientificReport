@model ScientificReport.DTO.Models.Department.DepartmentEditModel

@{
	ViewData["Title"] = "Edit";
	Layout = "_Layout";
}

<style type="text/css">
	.roles-list {
		overflow-y: scroll;
		height: 400px;
	}
	.text-green { color: rgb(0, 179, 0); }
	.text-red { color: rgb(177, 0, 0); }
	.cursor-pointer { cursor: pointer; }
	.hidden { display: none; }
</style>

<div class="bg-primary m-1 p-1 text-white"><h4>Edit department</h4></div>
<div asp-validation-summary="All" class="text-danger"></div>
<form asp-action="Edit" method="post">
	<div class="form-group">
		<label asp-for="Title"></label>
		<input asp-for="Title" class="form-control"/>
	</div>
	<div class="form-group">
		<label asp-for="SelectedHeadId"></label>
		<div class="col-md-5">
			@Html.DropDownListFor(x => Model.SelectedHeadId, new SelectList(Model.UserSelection, "Value", "Text"), new { @class = "form-control"})
			@Html.ValidationMessageFor(x => x.SelectedHeadId, "", new { @class = "text-danger" })
		</div>
	</div>
	<div class="col-md-4">
		<label>Staff:</label>
		<div class="authors-list">
			@if (Model.UserSelection != null && Model.Staff != null)
			{
				foreach (var user in Model.UserSelection)
				{
					if (user != null)
					{
						var contains = Model.Staff.Any(s => s.Id.ToString().Equals(user.Value));
						<p>
							@if (!Model.Head.Id.ToString().Equals(user.Value))
							{
								<i class="add-user fas fa-plus-circle fa-lg cursor-pointer text-green @(contains ? "hidden" : "")" onclick="addUserToStaff(this, '@user.Value', '@Model.DepartmentId')"></i>
								<i class="remove-user fas fa-minus-circle fa-lg cursor-pointer text-red @(contains ? "" : "hidden")" onclick="removeUserFromStaff(this, '@user.Value', '@Model.DepartmentId')"></i>
							}
							else
							{
								<i class="remove-user fas fa-minus-circle fa-lg" title="Can not remove head of department"></i>	
							}
							@user.Text
						</p>
					}
				}
			}
		</div>
	</div>
	<div class="col-md-4">
		<label>Scientific works:</label>
		<div class="authors-list">
			@if (Model.ScientificWorkItems != null && Model.ScientificWorks != null)
			{
				foreach (var scientificWork in Model.ScientificWorkItems)
				{
					if (scientificWork != null)
					{
						var contains = Model.ScientificWorks.Any(sw => sw.Id.ToString().Equals(scientificWork.Value));
						<p>
							<i class="add-scientific-work fas fa-plus-circle fa-lg cursor-pointer text-green @(contains ? "hidden" : "")" onclick="addScientificWork(this, '@scientificWork.Value', '@Model.DepartmentId')"></i>
							<i class="remove-scientific-work fas fa-minus-circle fa-lg cursor-pointer text-red @(contains ? "" : "hidden")" onclick="removeScientificWork(this, '@scientificWork.Value', '@Model.DepartmentId')"></i>
							@scientificWork.Text
						</p>
					}
				}
			}
		</div>
	</div>
	<button type="submit" class="btn btn-primary">Save</button>
	<a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>
<div>
	<a asp-action="Index">Back to List</a>
</div>

@section Scripts {
	<script>
		const toggle = (tagName, actionName, bodyFn) => (tag, firstParam, secondParam) => {
			const config = {
				method: 'POST',
				body: JSON.stringify(bodyFn(firstParam)),
				headers: {
					'Content-Type': 'application/json'
				}
			};
			fetch('/Department/' + actionName + `/${secondParam}`, config).then(response => {
				if (response.status !== 200) throw { msg: `Failed to toggle ${tagName}`, response };
				tag.classList.add('hidden');
				tag.parentElement.getElementsByClassName(tagName)[0].classList.remove('hidden');
			}).catch(e => {
				console.error(e);
			});
		}

		let staffBody = (userId) => {
			return { UserId: userId };
		};
		const addUserToStaff = toggle('remove-user', 'AddUserToStaff', staffBody);
		const removeUserFromStaff = toggle('add-user', 'RemoveUserFromStaff', staffBody);
		
		let scientificWorkBody = (scientificWorkId) => {
			return { ScientificWorkId: scientificWorkId };
		};
		const addScientificWork = toggle('remove-scientific-work', 'AddScientificWork', scientificWorkBody);
		const removeScientificWork = toggle('add-scientific-work', 'RemoveScientificWork', scientificWorkBody);
	</script>
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
